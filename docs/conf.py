# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys
from datetime import datetime
sys.path.insert(0, os.path.abspath('../'))

# -- Project information -----------------------------------------------------

# Gather version
project = 'buzzard'
copyright = u'%s, ngoguey' % datetime.now().year
author = 'ngoguey'
release = '0.6.5'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.coverage',
    'sphinx.ext.doctest',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.autosectionlabel',
    'recommonmark',
]

# Configure `numpy` style documentation
# More on http://www.sphinx-doc.org/en/stable/ext/napoleon.html#configuration
# and https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
napoleon_google_docstring = False
napoleon_use_param = False
napoleon_use_ivar = True
# napoleon_use_admonition_for_examples = True

# *********************************************************************************************** **
# Small hack to allow custom sections with sphinx::autodoc::napoleon::numpy
import glob
import re

napoleon_custom_sections = set()
for f in glob.glob('../buzzard/**/*.py', recursive=True):

    content = open(f).read()
    matches = re.findall(r'\n([ ]*)([^\n]+)\n( *)(\-+)\n', content)
    for spaces0, name, spaces1, dashes in matches:
        if spaces0 != spaces1:
            continue
        if len(name) != len(dashes):
            continue
        napoleon_custom_sections.add(name)
napoleon_custom_sections = list(napoleon_custom_sections)
# *********************************************************************************************** **
# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'default'

# -- Options for autodoc -----------------------------------------------------

autoclass_content = "both"
autodoc_default_flags = ['show-inheritance', 'members', 'undoc-members']
autodoc_member_order = 'bysource'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
if 'READTHEDOCS' in os.environ:
    html_theme = 'default'
else:
    html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


html_theme_options = {
    'collapse_navigation': False,

    # 'canonical_url': '',
    # 'analytics_id': 'UA-XXXXXXX-1',  #  Provided by Google in your dashboard
    # 'logo_only': False,
    # 'display_version': True,
    # 'prev_next_buttons_location': 'bottom',
    # 'style_external_links': False,
    # 'vcs_pageview_mode': '',
    # 'style_nav_header_background': 'white',
    # # Toc options
    # 'collapse_navigation': True,
    # 'sticky_navigation': True,
    # 'navigation_depth': 4,
    'includehidden': True,
    # 'titles_only': False
}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = '%sdoc' % project


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'buzzard.tex', 'buzzard Documentation',
     'Nicolas Goguey, Herv√© Nivon', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'buzzard', 'buzzard Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'buzzard', 'buzzard Documentation',
     author, 'buzzard', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Other Extensions configuration ------------------------------------------

autosummary_generate = True

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Additional setup --------------------------------------------------------

def process(app, what, name, obj, options, signature, return_annotation):
    if hasattr(obj, 'mro') and 'ASource' in [o.__name__ for o in obj.mro()]:
        return '(<implementation detail>)', None

def skip(app, what, name, obj, skip, options):
    if name in [
            'create_araster',
            'create_avector',
            'open_araster',
            'open_avector',
            'proj4_origin',
            'wkt_origin',
            'band_schema',
            'fp_origin',
            '__module__',
            '__dict__',
            '__weakref__',
            '__doc__',
            '__slots__',
    ]:
        return True
    return skip

def setup(app):
    app.add_css_file('theme_overrides.css')
    app.connect('autodoc-process-signature', process)
    app.connect('autodoc-skip-member', skip)
